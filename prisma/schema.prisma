generator client {
  provider = "prisma-client-js"

  // Assim n√£o terei o GENERATED local
  // output   = "./src/generated/prisma" // vercel
  // output = "../src/generated/prisma" // local
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  familias           MembrosDaFamilia[]
  familiaInvitations FamiliaConvite[]
  listas             ListaDeCompra[]
  veiculos           Veiculo[]
  tarefas            Tarefa[]
  atividades         Atividade[]

  @@index([email])
  @@map("usuarios")
}

enum Membros {
  PAIS
  FILHO
}

model Familia {
  id        String   @id @default(uuid()) @db.Uuid
  nome      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // usuarioId       String            @map("usuario_id") @db.Uuid
  membros         MembrosDaFamilia[]
  familiaConvites FamiliaConvite[]

  @@map("familia")
}

model MembrosDaFamilia {
  id         String   @id @default(uuid()) @db.Uuid
  id_usuario String   @db.Uuid
  id_familia String   @db.Uuid
  rotulo     Membros  @default(FILHO)
  createdAt  DateTime @default(now())

  usuario Usuario @relation(fields: [id_usuario], references: [id], onUpdate: Cascade, onDelete: Cascade)
  familia Familia @relation(fields: [id_familia], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("membros_da_familia")
}

enum StatusConvite {
  PENDENTE
  ACEITO
  REJEITADO
}

model FamiliaConvite {
  id        String        @id @default(uuid()) @db.Uuid
  familiaId String        @db.Uuid
  email     String        @unique
  status    StatusConvite
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  familia Familia  @relation(fields: [familiaId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  usuario Usuario? @relation(fields: [email], references: [email], onUpdate: Cascade, onDelete: Cascade)

  @@map("familia_convites")
}

enum TipoLista {
  MERCADO
  FARMACIA
  PADARIA
  ACOUGUE
  OUTROS
}

model ListaDeCompra {
  id   String    @id @default(uuid()) @db.Uuid
  tipo TipoLista

  usuarioId String  @map("usuario_id") @db.Uuid
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  itens      ItemListaDeCompra[]
  atividades Atividade[]

  @@map("lista_de_compras")
}

model ItemListaDeCompra {
  id         String  @id @default(uuid()) @db.Uuid
  descricao  String
  quantidade Int?
  comprado   Boolean @default(false)

  // Chaves estrangeiras - Relacionamento
  listaId String        @map("lista_id") @db.Uuid
  lista   ListaDeCompra @relation(fields: [listaId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("itens_lista_de_compras")
}

model Veiculo {
  id     String  @id @default(uuid()) @db.Uuid
  marca  String?
  modelo String?
  ano    Int?
  placa  String  @unique

  // Chaves estrangeiras - Relacionamento
  usuarioId String  @map("usuario_id") @db.Uuid
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  manutencoes RegistroDeManutencao[]
  atividades  Atividade[]

  @@map("veiculos")
}

model RegistroDeManutencao {
  id        String   @id @default(uuid()) @db.Uuid
  descricao String?
  data      DateTime
  valor     Float?

  // Chaves estrangeiras - Relacionamento
  veiculoId String  @map("veiculo_id") @db.Uuid
  veiculo   Veiculo @relation(fields: [veiculoId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("registros_de_manutencao")
}

model Tarefa {
  id        String  @id @default(uuid()) @db.Uuid
  descricao String
  status    Boolean @default(false)

  // Chaves estrangeiras - Relacionamento
  usuarioId String  @map("usuario_id") @db.Uuid
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  atividades Atividade[]

  @@map("tarefas")
}

enum TipoAtividade {
  TAREFA
  LISTA
  VEICULO
}

enum AcaoAtividade {
  CRIADA
  ATUALIZADA
  EXCLUIDA
}

model Atividade {
  id       String        @id @default(uuid()) @db.Uuid
  tipo     TipoAtividade
  acao     AcaoAtividade
  dataHora DateTime      @default(now()) @map("data_hora")

  // Chaves estrangeiras
  usuarioId       String  @map("usuario_id") @db.Uuid
  tarefaId        String? @map("tarefa_id") @db.Uuid
  listaDeCompraId String? @map("lista_de_compra_id") @db.Uuid
  veiculoId       String? @map("veiculo_id") @db.Uuid

  // Relacionamentos
  usuario Usuario        @relation(fields: [usuarioId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tarefa  Tarefa?        @relation(fields: [tarefaId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lista   ListaDeCompra? @relation(fields: [listaDeCompraId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  veiculo Veiculo?       @relation(fields: [veiculoId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("atividades")
}
